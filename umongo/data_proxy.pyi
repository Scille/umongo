from .abstract import BaseDataObject as BaseDataObject
from .exceptions import UnknownFieldInDBError as UnknownFieldInDBError
from typing import Any, Optional

class BaseDataProxy:
    schema: Any
    def __init__(self, data: Optional[Any] = ...) -> None: ...
    def to_mongo(self, update: bool = ...): ...
    def from_mongo(self, data) -> None: ...
    def dump(self): ...
    def update(self, data) -> None: ...
    def load(self, data) -> None: ...
    def get(self, name): ...
    def set(self, name, value) -> None: ...
    def delete(self, name) -> None: ...
    def __eq__(self, other): ...
    def get_modified_fields(self): ...
    def clear_modified(self) -> None: ...
    def is_modified(self): ...
    def required_validate(self) -> None: ...
    def items(self): ...
    def keys(self): ...
    def values(self): ...

class BaseNonStrictDataProxy(BaseDataProxy):
    def __init__(self, data: Optional[Any] = ...) -> None: ...
    def from_mongo(self, data) -> None: ...

def data_proxy_factory(basename, schema, strict: bool = ...): ...
