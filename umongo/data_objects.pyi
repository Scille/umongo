from .abstract import BaseDataObject as BaseDataObject
from typing import Any, Optional, Coroutine

class List(BaseDataObject, list):
    inner_field: Any
    def __init__(self, inner_field, *args, **kwargs) -> None: ...
    def is_modified(self): ...
    def set_modified(self) -> None: ...
    def clear_modified(self) -> None: ...

class Dict(BaseDataObject, dict):
    key_field: Any
    value_field: Any
    def __init__(self, key_field, value_field, *args, **kwargs) -> None: ...
    def is_modified(self): ...
    def set_modified(self) -> None: ...
    def clear_modified(self) -> None: ...

class Reference:
    error_messages: Any
    document_cls: Any
    pk: Any
    def __init__(self, document_cls, pk) -> None: ...
    def fetch(
        self, no_data: bool = ..., force_reload: bool = ...
    ) -> Optional[Coroutine[Any, Any, Any]]: ...
    def __eq__(self, other): ...
