from . import marshmallow_bonus as ma_bonus_fields
from .abstract import BaseField
from typing import Any

class StringField(BaseField): ...
class UUIDField(BaseField): ...
class NumberField(BaseField): ...
class IntegerField(BaseField): ...
class DecimalField(BaseField): ...
class BooleanField(BaseField): ...
class FloatField(BaseField): ...
class DateTimeField(BaseField): ...
class NaiveDateTimeField(BaseField): ...
class AwareDateTimeField(BaseField): ...
class DateField(BaseField): ...
class UrlField(BaseField): ...
class EmailField(BaseField): ...
class ConstantField(BaseField): ...

class DictField(BaseField):
    default: Any
    missing: Any
    def __init__(self, *args, **kwargs): ...
    def as_marshmallow_field(self): ...

class ListField(BaseField):
    default: Any
    missing: Any
    def __init__(self, *args, **kwargs): ...
    def map_to_field(self, mongo_path, path, func) -> None: ...
    def as_marshmallow_field(self): ...

URLField = UrlField
StrField = StringField
BoolField = BooleanField
IntField = IntegerField

class ObjectIdField(BaseField, ma_bonus_fields.ObjectId): ...

class ReferenceField(BaseField, ma_bonus_fields.Reference):
    reference_cls: Any
    document: Any
    def __init__(self, document, *args, reference_cls=..., **kwargs) -> None: ...
    @property
    def document_cls(self): ...

class GenericReferenceField(BaseField, ma_bonus_fields.GenericReference):
    reference_cls: Any
    def __init__(self, *args, reference_cls=..., **kwargs) -> None: ...

class EmbeddedField(BaseField):
    embedded_document: Any
    def __init__(self, embedded_document, *args, **kwargs) -> None: ...
    @property
    def nested(self): ...
    @nested.setter
    def nested(self, value) -> None: ...
    @property
    def embedded_document_cls(self): ...
    def map_to_field(self, mongo_path, path, func) -> None: ...
    def as_marshmallow_field(self): ...
