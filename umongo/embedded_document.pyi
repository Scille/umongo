from .data_objects import BaseDataObject
from .template import Implementation, Template
from typing import Any, Optional

class EmbeddedDocumentTemplate(Template): ...

EmbeddedDocument = EmbeddedDocumentTemplate

class EmbeddedDocumentOpts:
    instance: Any
    template: Any
    abstract: Any
    is_child: Any
    strict: Any
    offspring: Any
    def __init__(
        self,
        instance,
        template,
        abstract: bool = ...,
        is_child: bool = ...,
        strict: bool = ...,
        offspring: Optional[Any] = ...,
    ) -> None: ...

class EmbeddedDocumentImplementation(Implementation, BaseDataObject):
    opts: Any
    def __init__(self, **kwargs) -> None: ...
    def __eq__(self, other): ...
    def is_modified(self): ...
    def clear_modified(self) -> None: ...
    def required_validate(self) -> None: ...
    @classmethod
    def build_from_mongo(cls, data, use_cls: bool = ...): ...
    def from_mongo(self, data) -> None: ...
    def to_mongo(self, update: bool = ...): ...
    def update(self, data): ...
    def dump(self): ...
    def items(self): ...
    def __getitem__(self, name): ...
    def __delitem__(self, name) -> None: ...
    def __setitem__(self, name, value) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __getattr__(self, name): ...
    def __delattr__(self, name) -> None: ...
